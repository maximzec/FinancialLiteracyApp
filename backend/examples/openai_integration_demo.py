"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenAI API –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏

–≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenAI –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —è–≤–ª—è—é—Ç—Å—è —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏, –Ω–æ —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞.
"""

import asyncio
import json
from typing import List, Dict, Any
import openai
from config import settings

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = openai.OpenAI(api_key=settings.OPENAI_API_KEY)


async def demo_personal_plan_generation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è"""
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è")
    print("-" * 60)

    user_goals = ["–ù–∞—É—á–∏—Ç—å—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å",
                  "–°–æ–∑–¥–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–æ–¥—É—à–∫—É", "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ–Ω—Å–∏—é"]
    experience_level = "beginner"

    prompt = f"""
    –°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    
    –¶–µ–ª–∏: {', '.join(user_goals)}
    –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: {experience_level}
    
    –°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ 12 –Ω–µ–¥–µ–ª—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —à–∞–≥–∞–º–∏ –∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏.
    """

    try:
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=2000,
            functions=[{
                "name": "generate_learning_plan",
                "description": "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "duration_weeks": {"type": "integer"},
                        "learning_path": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "week": {"type": "integer"},
                                    "topic": {"type": "string"},
                                    "objectives": {"type": "array", "items": {"type": "string"}},
                                    "activities": {"type": "array", "items": {"type": "string"}}
                                }
                            }
                        },
                        "milestones": {"type": "array", "items": {"type": "string"}}
                    }
                }
            }],
            function_call={"name": "generate_learning_plan"}
        )

        plan_data = json.loads(
            response.choices[0].message.function_call.arguments)

        print(f"‚úÖ –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω –Ω–∞ {plan_data['duration_weeks']} –Ω–µ–¥–µ–ª—å")
        print(f"üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–ø–æ–≤: {len(plan_data['learning_path'])}")
        print(f"üéØ –ö–ª—é—á–µ–≤—ã–µ –≤–µ—Ö–∏: {len(plan_data['milestones'])}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –Ω–µ–¥–µ–ª–∏
        for week_data in plan_data['learning_path'][:3]:
            print(f"\nüìÖ –ù–µ–¥–µ–ª—è {week_data['week']}: {week_data['topic']}")
            for objective in week_data['objectives'][:2]:
                print(f"   ‚Ä¢ {objective}")

        print(f"\nüí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {response.usage.total_tokens}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def demo_adaptive_content_generation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞"""
    print("\nüìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    print("-" * 60)

    lesson_topic = "–û—Å–Ω–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    user_level = "beginner"

    prompt = f"""
    –°–æ–∑–¥–∞–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —É—Ä–æ–∫–∞ "{lesson_topic}" 
    –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —É—Ä–æ–≤–Ω—è "{user_level}".
    
    –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –≤–∫–ª—é—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã.
    """

    try:
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system",
                    "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.6,
            max_tokens=1500,
            functions=[{
                "name": "generate_educational_content",
                "description": "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "content": {"type": "string"},
                        "key_points": {"type": "array", "items": {"type": "string"}},
                        "examples": {"type": "array", "items": {"type": "string"}},
                        "practical_tips": {"type": "array", "items": {"type": "string"}}
                    }
                }
            }],
            function_call={"name": "generate_educational_content"}
        )

        content_data = json.loads(
            response.choices[0].message.function_call.arguments)

        print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É—Ä–æ–∫–∞: {lesson_topic}")
        print(f"üìñ –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content_data['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üîë –ö–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤: {len(content_data['key_points'])}")
        print(f"üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤: {len(content_data['practical_tips'])}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
        print("\nüîë –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:")
        for point in content_data['key_points'][:3]:
            print(f"   ‚Ä¢ {point}")

        print(f"\nüí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {response.usage.total_tokens}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def demo_intelligent_quiz_validation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ç–µ—Å—Ç—ã"""
    print("\nüß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤")
    print("-" * 60)

    question = "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π?"
    correct_answer = "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–∞"
    user_answer = "–≠—Ç–æ –∫–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞–µ—à—å —Ä–∞–∑–Ω—ã–µ –∞–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –≤—Å–µ –¥–µ–Ω—å–≥–∏ —Å—Ä–∞–∑—É"

    prompt = f"""
    –û—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏:
    
    –í–æ–ø—Ä–æ—Å: {question}
    –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}
    –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_answer}
    
    –î–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É —Å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é.
    """

    try:
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system",
                    "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –∑–Ω–∞–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            max_tokens=800,
            functions=[{
                "name": "validate_quiz_answer",
                "description": "–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Å—Ç",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "is_correct": {"type": "boolean"},
                        "confidence": {"type": "number", "minimum": 0, "maximum": 1},
                        "detailed_feedback": {"type": "string"},
                        "improvement_suggestions": {"type": "array", "items": {"type": "string"}}
                    }
                }
            }],
            function_call={"name": "validate_quiz_answer"}
        )

        validation_result = json.loads(
            response.choices[0].message.function_call.arguments)

        print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ü–µ–Ω–µ–Ω")
        print(
            f"üéØ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å: {'–î–∞' if validation_result['is_correct'] else '–ù–µ—Ç'}")
        print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {validation_result['confidence']:.2f}")
        print(
            f"üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {validation_result['detailed_feedback'][:100]}...")

        if validation_result['improvement_suggestions']:
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for suggestion in validation_result['improvement_suggestions'][:2]:
                print(f"   ‚Ä¢ {suggestion}")

        print(f"\nüí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {response.usage.total_tokens}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def demo_ai_tutor_chat():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI-—Ç—å—é—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"""
    print("\nü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: AI-—Ç—å—é—Ç–æ—Ä")
    print("-" * 60)

    user_question = "–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–µ–±–æ–ª—å—à–æ–π —Å—É–º–º–æ–π?"

    prompt = f"""
    –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_question}
    
    –û—Ç–≤–µ—Ç—å –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏. 
    –î–∞–π –ø–æ–Ω—è—Ç–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏.
    """

    try:
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã AI-—Ç—å—é—Ç–æ—Ä –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏. –û—Ç–≤–µ—á–∞–π –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1000
        )

        ai_response = response.choices[0].message.content

        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
        print(f"üìù –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(ai_response)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üéØ –í–æ–ø—Ä–æ—Å: {user_question}")
        print(f"ü§ñ –û—Ç–≤–µ—Ç: {ai_response[:200]}...")

        print(f"\nüí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {response.usage.total_tokens}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def demo_financial_concepts_generation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π"""
    print("\nüìö –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π")
    print("-" * 60)

    category = "–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    difficulty_level = "beginner"

    prompt = f"""
    –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 5 –≤–∞–∂–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}" 
    —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ "{difficulty_level}". 
    
    –î–ª—è –∫–∞–∂–¥–æ–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
    - –¢–µ—Ä–º–∏–Ω
    - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    - –ü—Ä–æ—Å—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    - –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """

    try:
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=2000,
            functions=[{
                "name": "generate_financial_concepts",
                "description": "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "concepts": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "term": {"type": "string"},
                                    "definition": {"type": "string"},
                                    "simple_explanation": {"type": "string"},
                                    "example": {"type": "string"}
                                }
                            }
                        }
                    }
                }
            }],
            function_call={"name": "generate_financial_concepts"}
        )

        concepts_data = json.loads(
            response.choices[0].message.function_call.arguments)

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π: {len(concepts_data['concepts'])}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
        for i, concept in enumerate(concepts_data['concepts'][:2], 1):
            print(f"\nüìñ –ö–æ–Ω—Ü–µ–ø—Ü–∏—è {i}: {concept['term']}")
            print(f"   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {concept['definition'][:80]}...")
            print(
                f"   –ü—Ä–æ—Å—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ: {concept['simple_explanation'][:80]}...")

        print(f"\nüí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {response.usage.total_tokens}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def demo_content_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print("\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    print("-" * 60)

    content = """
    –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–µ–Ω–µ–≥ —Å —Ü–µ–ª—å—é –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏. 
    –°—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–≥–æ –≤–∏–¥–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: –∞–∫—Ü–∏–∏, –æ–±–ª–∏–≥–∞—Ü–∏–∏, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å. 
    –í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å –æ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –Ω–µ –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å –≤—Å–µ –¥–µ–Ω—å–≥–∏ –≤ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤.
    """

    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏:
    
    –ö–æ–Ω—Ç–µ–Ω—Ç: {content}
    
    –û—Ü–µ–Ω–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
    1. –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (0-1)
    2. –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å (0-1)
    3. –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (0-1)
    4. –£—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ (0-1)
    
    –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.
    """

    try:
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system",
                    "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            max_tokens=800
        )

        analysis = response.choices[0].message.content

        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {analysis[:150]}...")

        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_score = min(1.0, len(content.split()) / 50)  # –ë–∞–∑–æ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞
        print(f"üéØ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality_score:.2f}")

        print(f"\nüí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {response.usage.total_tokens}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def demo_embeddings_creation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π"""
    print("\nüî¢ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: –°–æ–∑–¥–∞–Ω–∏–µ embeddings")
    print("-" * 60)

    texts = [
        "–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–º–æ–≥–∞–µ—Ç —Å–Ω–∏–∑–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏",
        "–°–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç - –≤–æ—Å—å–º–æ–µ —á—É–¥–æ —Å–≤–µ—Ç–∞",
        "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥—É—à–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫—Ä—ã–≤–∞—Ç—å 3-6 –º–µ—Å—è—Ü–µ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤"
    ]

    try:
        for i, text in enumerate(texts, 1):
            response = await client.embeddings.create(
                model="text-embedding-ada-002",
                input=text
            )

            embedding = response.data[0].embedding

            print(f"‚úÖ Embedding {i} —Å–æ–∑–¥–∞–Ω")
            print(f"üìù –¢–µ–∫—Å—Ç: {text}")
            print(f"üî¢ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(embedding)}")
            print(f"üìä –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: {embedding[:5]}")
            print(f"üí∞ –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {response.usage.total_tokens}")
            print()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenAI API")
    print("=" * 60)

    demos = [
        demo_personal_plan_generation,
        demo_adaptive_content_generation,
        demo_intelligent_quiz_validation,
        demo_ai_tutor_chat,
        demo_financial_concepts_generation,
        demo_content_analysis,
        demo_embeddings_creation
    ]

    for demo in demos:
        try:
            await demo()
            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

    print("\nüéâ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ OpenAI –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:")
    print("   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –æ–±—É—á–µ–Ω–∏—è")
    print("   ‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–æ–≤")
    print("   ‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤")
    print("   ‚Ä¢ AI-—Ç—å—é—Ç–æ—Ä –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π")
    print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    print("   ‚Ä¢ –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")


if __name__ == "__main__":
    # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:
    # python -m examples.openai_integration_demo
    asyncio.run(main())
