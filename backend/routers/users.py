from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List, Optional

from database import get_db
from models.user import User, UserProfile
from models.lesson import LessonProgress
from models.gamification import UserCoins, UserChallenge
from schemas.user import (
    UserResponse, UserProfileCreate, UserProfileUpdate, UserProfileResponse,
    UserWithProfile
)
from schemas.lesson import LessonStats
from routers.auth import get_current_user_dependency

router = APIRouter(prefix="/users", tags=["Users & Profiles"])


@router.get("/me", response_model=UserWithProfile)
async def get_current_user_profile(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user_dependency)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = db.query(UserProfile).filter(
        UserProfile.user_id == current_user.id).first()

    user_data = UserWithProfile(
        id=current_user.id,
        email=current_user.email,
        first_name=current_user.first_name,
        last_name=current_user.last_name,
        is_active=current_user.is_active,
        created_at=current_user.created_at,
        profile=profile
    )

    return user_data


@router.post("/profile", response_model=UserProfileResponse)
async def create_user_profile(
    profile_data: UserProfileCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user_dependency)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å
    existing_profile = db.query(UserProfile).filter(
        UserProfile.user_id == current_user.id).first()
    if existing_profile:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PUT –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
        )

    profile = UserProfile(
        user_id=current_user.id,
        age=profile_data.age,
        financial_experience=profile_data.financial_experience,
        monthly_income=profile_data.monthly_income,
        financial_goals=profile_data.financial_goals,
        risk_tolerance=profile_data.risk_tolerance,
        preferred_learning_style=profile_data.preferred_learning_style,
        goals=profile_data.goals
    )

    db.add(profile)
    db.commit()
    db.refresh(profile)

    return profile


@router.put("/profile", response_model=UserProfileResponse)
async def update_user_profile(
    profile_data: UserProfileUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user_dependency)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = db.query(UserProfile).filter(
        UserProfile.user_id == current_user.id).first()

    if not profile:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å–Ω–∞—á–∞–ª–∞."
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    update_data = profile_data.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(profile, field, value)

    db.commit()
    db.refresh(profile)

    return profile


@router.get("/profile", response_model=UserProfileResponse)
async def get_user_profile(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user_dependency)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = db.query(UserProfile).filter(
        UserProfile.user_id == current_user.id).first()

    if not profile:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )

    return profile


@router.delete("/profile")
async def delete_user_profile(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user_dependency)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = db.query(UserProfile).filter(
        UserProfile.user_id == current_user.id).first()

    if not profile:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )

    db.delete(profile)
    db.commit()

    return {"message": "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}


@router.get("/stats", response_model=LessonStats)
async def get_user_learning_stats(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user_dependency)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫–∞–º
    progress_records = db.query(LessonProgress).filter(
        LessonProgress.user_id == current_user.id
    ).all()

    total_lessons = len(progress_records)
    completed_lessons = len(
        [p for p in progress_records if p.status == "completed"])
    in_progress_lessons = len(
        [p for p in progress_records if p.status == "in_progress"])
    total_time_spent = sum(p.time_spent_minutes for p in progress_records)

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    if progress_records:
        average_progress = sum(
            p.progress_percentage for p in progress_records) / len(progress_records)
        completion_rate = (completed_lessons / total_lessons) * 100
    else:
        average_progress = 0.0
        completion_rate = 0.0

    return LessonStats(
        total_lessons=total_lessons,
        completed_lessons=completed_lessons,
        in_progress_lessons=in_progress_lessons,
        total_time_spent=total_time_spent,
        average_progress=average_progress,
        completion_rate=completion_rate
    )


@router.get("/dashboard")
async def get_user_dashboard(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user_dependency)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
    progress_records = db.query(LessonProgress).filter(
        LessonProgress.user_id == current_user.id
    ).all()

    completed_lessons = len(
        [p for p in progress_records if p.status == "completed"])
    in_progress_lessons = len(
        [p for p in progress_records if p.status == "in_progress"])

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
    user_coins = db.query(UserCoins).filter(
        UserCoins.user_id == current_user.id).first()
    active_challenges = db.query(UserChallenge).filter(
        UserChallenge.user_id == current_user.id,
        UserChallenge.is_completed == False
    ).count()

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    recent_progress = db.query(LessonProgress).filter(
        LessonProgress.user_id == current_user.id
    ).order_by(LessonProgress.started_at.desc()).limit(5).all()

    return {
        "learning_stats": {
            "completed_lessons": completed_lessons,
            "in_progress_lessons": in_progress_lessons,
            "total_time_spent": sum(p.time_spent_minutes for p in progress_records),
        },
        "gamification_stats": {
            "total_coins": user_coins.current_balance if user_coins else 0,
            "active_challenges": active_challenges,
        },
        "recent_activities": [
            {
                "lesson_id": p.lesson_id,
                "status": p.status,
                "progress": p.progress_percentage,
                "last_activity": p.started_at
            }
            for p in recent_progress
        ]
    }


@router.get("/achievements")
async def get_user_achievements(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user_dependency)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    progress_records = db.query(LessonProgress).filter(
        LessonProgress.user_id == current_user.id
    ).all()

    completed_lessons = len(
        [p for p in progress_records if p.status == "completed"])
    total_time_spent = sum(p.time_spent_minutes for p in progress_records)

    completed_challenges = db.query(UserChallenge).filter(
        UserChallenge.user_id == current_user.id,
        UserChallenge.is_completed == True
    ).count()

    user_coins = db.query(UserCoins).filter(
        UserCoins.user_id == current_user.id).first()
    total_coins = user_coins.total_earned if user_coins else 0

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievements = []

    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–∫–∏
    if completed_lessons >= 1:
        achievements.append({
            "id": "first_lesson",
            "title": "–ü–µ—Ä–≤—ã–π —à–∞–≥",
            "description": "–ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫",
            "icon": "üéØ",
            "earned_at": "2024-01-01"  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - –¥–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è
        })

    if completed_lessons >= 10:
        achievements.append({
            "id": "ten_lessons",
            "title": "–£—á–µ–Ω–∏–∫",
            "description": "–ó–∞–≤–µ—Ä—à–∏–ª–∏ 10 —É—Ä–æ–∫–æ–≤",
            "icon": "üìö",
            "earned_at": "2024-01-15"
        })

    if completed_lessons >= 50:
        achievements.append({
            "id": "fifty_lessons",
            "title": "–≠–∫—Å–ø–µ—Ä—Ç",
            "description": "–ó–∞–≤–µ—Ä—à–∏–ª–∏ 50 —É—Ä–æ–∫–æ–≤",
            "icon": "üèÜ",
            "earned_at": "2024-02-01"
        })

    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
    if total_time_spent >= 60:  # 1 —á–∞—Å
        achievements.append({
            "id": "one_hour",
            "title": "–ß–∞—Å –∑–Ω–∞–Ω–∏–π",
            "description": "–ü–æ—Ç—Ä–∞—Ç–∏–ª–∏ —á–∞—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ",
            "icon": "‚è∞",
            "earned_at": "2024-01-05"
        })

    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∏
    if completed_challenges >= 1:
        achievements.append({
            "id": "first_challenge",
            "title": "–ü—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤",
            "description": "–ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂",
            "icon": "üí™",
            "earned_at": "2024-01-10"
        })

    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–æ–∏–Ω—ã
    if total_coins >= 100:
        achievements.append({
            "id": "hundred_coins",
            "title": "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä",
            "description": "–ó–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 100 –∫–æ–∏–Ω–æ–≤",
            "icon": "üí∞",
            "earned_at": "2024-01-20"
        })

    return {
        "total_achievements": len(achievements),
        "achievements": achievements,
        "next_achievements": [
            {
                "id": "hundred_lessons",
                "title": "–ú–∞—Å—Ç–µ—Ä",
                "description": "–ó–∞–≤–µ—Ä—à–∏—Ç–µ 100 —É—Ä–æ–∫–æ–≤",
                "icon": "üéì",
                "progress": completed_lessons,
                "target": 100
            },
            {
                "id": "thousand_coins",
                "title": "–ë–æ–≥–∞—á",
                "description": "–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 1000 –∫–æ–∏–Ω–æ–≤",
                "icon": "üíé",
                "progress": total_coins,
                "target": 1000
            }
        ]
    }


@router.get("/preferences")
async def get_user_preferences(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user_dependency)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = db.query(UserProfile).filter(
        UserProfile.user_id == current_user.id).first()

    return {
        "notifications": {
            "email_lessons": True,
            "email_challenges": True,
            "push_reminders": True,
            "weekly_reports": True
        },
        "learning": {
            "preferred_style": profile.preferred_learning_style if profile else "visual",
            "difficulty_level": profile.financial_experience if profile else "beginner",
            "daily_goal_minutes": 30,
            "reminder_time": "18:00"
        },
        "privacy": {
            "profile_visibility": "private",
            "show_in_leaderboard": True,
            "data_analytics": True
        }
    }


@router.put("/preferences")
async def update_user_preferences(
    preferences: dict,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user_dependency)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

    return {
        "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
        "updated_preferences": preferences
    }


@router.delete("/account")
async def delete_user_account(
    confirmation: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user_dependency)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if confirmation != "DELETE_MY_ACCOUNT":
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"
        )

    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞:
    # 1. –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    # 2. –ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_user.is_active = False
    db.commit()

    return {"message": "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"}
